{
  "openapi": "3.0.3",
  "info": {
    "title": "xRegistry API",
    "description": "xRegistry API",
    "version": "0.5-wip"
  },
  "servers": [],
  "security": [
    {
      "api_key": []
    }
  ],
  "paths": {
    "/": {
      "get": {
        "operationId": "getRootDocument",
        "description": "Gets the root document",
        "parameters": [
          {
            "in": "query",
            "name": "inline",
            "description": "Set if references shall be inlined",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The root document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "upsertDocument",
        "description": "Uploads a registry document and upserts its contents into the registry",
        "requestBody": {
          "description": "A request to create or update the discovery endpoint's collection of endpoints with the given endpoints",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resulting document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            }
          }
        }
      }
    },
    "/endpoints/{groupid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getEndpoint",
        "responses": {
          "200": {
            "description": "The resource group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoint"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "putEndpoint",
        "description": "creates or updates the resource group",
        "requestBody": {
          "description": "A request to create or update the discovery group's collection of groups with the given group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/endpoint"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpoint"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteEndpoint",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/messagegroups/{groupid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getMessagegroup",
        "responses": {
          "200": {
            "description": "The resource group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messagegroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "putMessagegroup",
        "description": "creates or updates the resource group",
        "requestBody": {
          "description": "A request to create or update the discovery group's collection of groups with the given group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/messagegroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messagegroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteMessagegroup",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{groupid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getSchemagroup",
        "responses": {
          "200": {
            "description": "The resource group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemagroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "putSchemagroup",
        "description": "creates or updates the resource group",
        "requestBody": {
          "description": "A request to create or update the discovery group's collection of groups with the given group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schemagroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schemagroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "operationId": "deleteSchemagroup",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/endpoints/{groupid}/messages": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getEndpointMessagesAll",
        "description": "Get an optionally filtered collection of resources",
        "parameters": [
          {
            "in": "query",
            "name": "inline",
            "description": "Set if references shall be inlined",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/message"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessagesAll",
        "description": "Get an optionally filtered collection of resources",
        "parameters": [
          {
            "in": "query",
            "name": "inline",
            "description": "Set if references shall be inlined",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/message"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{groupid}/schemas": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        }
      ],
      "get": {
        "operationId": "getSchemagroupSchemasAll",
        "description": "Get an optionally filtered collection of resources",
        "parameters": [
          {
            "in": "query",
            "name": "inline",
            "description": "Set if references shall be inlined",
            "required": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/schema"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/endpoints/{groupid}/messages/{resourceid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getEndpointMessage",
        "responses": {
          "200": {
            "description": "The corresponding resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              },
              "Content-Location": {
                "description": "permalink location of the returned version",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be upserted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          }
        ],
        "summary": "Create or update a resource",
        "description": "Create a resource. ",
        "operationId": "putEndpointMessage",
        "requestBody": {
          "description": "The resource to be created/updated",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "post": {
        "summary": "Post new resource version",
        "description": "Register resource version If resource of specified name does not exist in specified group, resource and resource version is created at version 1. If resource of specified name exists already in specified group, resource is created at latest version + 1. If resource with identical content already exists, existing resource's ID is returned. \n",
        "operationId": "postEndpointMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          },
          {
            "in": "header",
            "description": "format",
            "name": "format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A request to add a new resource to the version collection",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "summary": "Delete resource",
        "description": "Delete resource",
        "operationId": "deleteEndpointMessage",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages/{resourceid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessage",
        "responses": {
          "200": {
            "description": "The corresponding resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              },
              "Content-Location": {
                "description": "permalink location of the returned version",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be upserted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          }
        ],
        "summary": "Create or update a resource",
        "description": "Create a resource. ",
        "operationId": "putMessagegroupMessage",
        "requestBody": {
          "description": "The resource to be created/updated",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "post": {
        "summary": "Post new resource version",
        "description": "Register resource version If resource of specified name does not exist in specified group, resource and resource version is created at version 1. If resource of specified name exists already in specified group, resource is created at latest version + 1. If resource with identical content already exists, existing resource's ID is returned. \n",
        "operationId": "postMessagegroupMessage",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          },
          {
            "in": "header",
            "description": "format",
            "name": "format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A request to add a new resource to the version collection",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "summary": "Delete resource",
        "description": "Delete resource",
        "operationId": "deleteMessagegroupMessage",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/schemagroups/{groupid}/schemas/{resourceid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getSchemagroupSchema",
        "responses": {
          "200": {
            "description": "The corresponding resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              },
              "Content-Location": {
                "description": "permalink location of the returned version",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be upserted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          }
        ],
        "summary": "Create or update a resource",
        "description": "Create a resource. ",
        "operationId": "putSchemagroupSchema",
        "requestBody": {
          "description": "The resource to be created/updated",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "post": {
        "summary": "Post new resource version",
        "description": "Register resource version If resource of specified name does not exist in specified group, resource and resource version is created at version 1. If resource of specified name exists already in specified group, resource is created at latest version + 1. If resource with identical content already exists, existing resource's ID is returned. \n",
        "operationId": "postSchemagroupSchema",
        "parameters": [
          {
            "$ref": "#/components/parameters/resource-description"
          },
          {
            "$ref": "#/components/parameters/resource-documentation"
          },
          {
            "$ref": "#/components/parameters/resource-labels"
          },
          {
            "in": "header",
            "description": "format",
            "name": "format",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A request to add a new resource to the version collection",
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created resource",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      },
      "delete": {
        "summary": "Delete resource",
        "description": "Delete resource",
        "operationId": "deleteSchemagroupSchema",
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/endpoints/{groupid}/messages/{resourceid}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        }
      ],
      "get": {
        "operationId": "getEndpointMessageVersionsAll",
        "description": "Get an optionally filtered collection of versions",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/message"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages/{resourceid}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessageVersionsAll",
        "description": "Get an optionally filtered collection of versions",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/message"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{groupid}/schemas/{resourceid}/versions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        }
      ],
      "get": {
        "operationId": "getSchemagroupSchemaVersionsAll",
        "description": "Get an optionally filtered collection of versions",
        "parameters": [
          {
            "in": "query",
            "name": "skip",
            "description": "The number of resources to skip",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The number of resources to show",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "Filter criterion(s)",
            "explode": true,
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated list of versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/schema"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/endpoints/{groupid}/messages/{resourceid}/versions/{versionid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "$ref": "#/components/parameters/versionid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "allowEmptyValue": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getEndpointMessageVersion",
        "description": "Gets the document stored for the schema version",
        "responses": {
          "200": {
            "description": "The schema version document",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "updateEndpointMessageVersion",
        "description": "Updates the metadata for the schema version",
        "requestBody": {
          "description": "The schema version document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The schema version metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "deleteEndpointMessageVersion",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/messagegroups/{groupid}/messages/{resourceid}/versions/{versionid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "$ref": "#/components/parameters/versionid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "allowEmptyValue": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getMessagegroupMessageVersion",
        "description": "Gets the document stored for the schema version",
        "responses": {
          "200": {
            "description": "The schema version document",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "updateMessagegroupMessageVersion",
        "description": "Updates the metadata for the schema version",
        "requestBody": {
          "description": "The schema version document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/message"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The schema version metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "deleteMessagegroupMessageVersion",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    },
    "/schemagroups/{groupid}/schemas/{resourceid}/versions/{versionid}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/groupid"
        },
        {
          "$ref": "#/components/parameters/resourceid"
        },
        {
          "$ref": "#/components/parameters/versionid"
        },
        {
          "in": "query",
          "name": "meta",
          "description": "Interact with the metadata",
          "required": false,
          "allowEmptyValue": true,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "get": {
        "operationId": "getSchemagroupSchemaVersion",
        "description": "Gets the document stored for the schema version",
        "responses": {
          "200": {
            "description": "The schema version document",
            "headers": {
              "resource-id": {
                "$ref": "#/components/headers/resource-id"
              },
              "resource-version": {
                "$ref": "#/components/headers/resource-version"
              },
              "resource-name": {
                "$ref": "#/components/headers/resource-name"
              },
              "resource-self": {
                "$ref": "#/components/headers/resource-self"
              },
              "resource-description": {
                "$ref": "#/components/headers/resource-description"
              },
              "resource-documentation": {
                "$ref": "#/components/headers/resource-documentation"
              },
              "resource-labels": {
                "$ref": "#/components/headers/resource-labels"
              },
              "resource-createdat": {
                "$ref": "#/components/headers/resource-createdat"
              },
              "resource-modifiedat": {
                "$ref": "#/components/headers/resource-modifiedat"
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "updateSchemagroupSchemaVersion",
        "description": "Updates the metadata for the schema version",
        "requestBody": {
          "description": "The schema version document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The schema version metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/schema"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "in": "query",
            "name": "epoch",
            "description": "The epoch of the resource group to be deleted",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "A number representing the version number of the resource.",
              "format": "int64"
            }
          }
        ],
        "operationId": "deleteSchemagroupSchemaVersion",
        "responses": {
          "204": {
            "description": "Ok"
          },
          "400": {
            "description": "Bad Request - constraint failure"
          },
          "409": {
            "description": "Conflict - epoch not greater"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "code",
        "in": "query"
      }
    },
    "parameters": {
      "groupType": {
        "in": "path",
        "name": "groupType",
        "description": "The groupType (plural)",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "resourceType": {
        "in": "path",
        "name": "resourceType",
        "description": "The resourceType (plural)",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "endpointid": {
        "in": "path",
        "name": "endpointid",
        "description": "The id of the endpoint",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "groupid": {
        "in": "path",
        "name": "groupid",
        "description": "The id of the group",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "resourceid": {
        "in": "path",
        "name": "resourceid",
        "description": "The id of the schema",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "versionid": {
        "in": "path",
        "name": "versionid",
        "description": "The id of the schema",
        "required": true,
        "schema": {
          "type": "string",
          "description": "A unique identifier",
          "format": "uri-reference"
        }
      },
      "resource-type": {
        "in": "header",
        "name": "resource-type",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resource-id": {
        "in": "header",
        "name": "resource-id",
        "required": false,
        "description": "A unique identifier for this resource. This value MUST be globally unique",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-version": {
        "in": "header",
        "name": "resource-version",
        "required": false,
        "description": "A number representing the version number of the resource.",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "resource-self": {
        "in": "header",
        "name": "resource-self",
        "required": false,
        "description": "A unique URI for the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-description": {
        "in": "header",
        "name": "resource-description",
        "required": false,
        "description": "A summary of the purpose of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-name": {
        "in": "header",
        "name": "resource-name",
        "required": false,
        "description": "The name of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-documentation": {
        "in": "header",
        "required": false,
        "name": "resource-documentation",
        "description": "Absolute URL that provides a link to additional documentation about the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-labels": {
        "in": "header",
        "name": "resource-labels",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/resource-labels"
          }
        }
      },
      "resource-createdat": {
        "in": "header",
        "name": "resource-createdat",
        "required": false,
        "description": "Time when this entity was created",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "resource-modifiedat": {
        "in": "header",
        "name": "resource-modifiedat",
        "required": false,
        "description": "Time when this entity was last modified",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "headers": {
      "resource-type": {
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resource-id": {
        "required": false,
        "description": "A unique identifier for this Endpoint. This value MUST be globally unique",
        "schema": {
          "type": "string",
          "format": "uri-reference"
        }
      },
      "resource-version": {
        "required": false,
        "description": "A number representing the version number of the resource.",
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      },
      "resource-self": {
        "required": false,
        "description": "A unique URI for the resource. The URI MUST be a combination of the  base URI of the list of this resource type for the current Discovery  Service appended with the `id` of this resource.\n",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-description": {
        "required": false,
        "description": "A summary of the purpose of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-name": {
        "required": false,
        "description": "The name of the resource.",
        "schema": {
          "type": "string"
        }
      },
      "resource-documentation": {
        "description": "Absolute URL that provides a link to additional documentation about the resource.",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      },
      "resource-labels": {
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/resource-labels"
          }
        }
      },
      "resource-createdat": {
        "required": false,
        "description": "Time when this entity was created",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "resource-modifiedat": {
        "required": false,
        "description": "Time when this entity was last modified",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "schemas": {
      "resource-labels": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "document": {
        "type": "object",
        "properties": {
          "endpoints": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/endpoint"
            }
          },
          "messagegroups": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/messagegroup"
            }
          },
          "schemagroups": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/schemagroup"
            }
          }
        }
      },
      "envelope_CloudEvents_1_0": {
        "properties": {
          "envelope": {
            "type": "string",
            "description": "Message envelope format identifier. This attribute MUST be the same as the 'envelope' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups. The predefined envelope format is 'CloudEvents/1.0'",
            "enum": [
              "CloudEvents/1.0"
            ]
          },
          "envelopemetadata": {
            "type": "object",
            "description": "CloudEvents attribute declarations, adding constraints to the CloudEvents envelope not yet covered by the CloudEvents spec https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md",
            "properties": {
              "specversion": {
                "type": "object",
                "description": "CloudEvents specversion https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#specversion",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents spec version (fixed to '1.0')"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "CloudEvents specversion is always required"
                  }
                }
              },
              "id": {
                "type": "object",
                "description": "CloudEvents id https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#id",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents id value constraint"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "CloudEvents id is always required"
                  }
                }
              },
              "type": {
                "type": "object",
                "description": "CloudEvents type https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#type",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents type value constraint"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "CloudEvents type is always required"
                  }
                }
              },
              "source": {
                "type": "object",
                "description": "CloudEvents source https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#source-1",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents source value constraint"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "CloudEvents source is always required"
                  }
                },
                "required": [
                  "required"
                ]
              },
              "subject": {
                "type": "object",
                "description": "CloudEvents subject https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#subject",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "CloudEvents subject value constraint"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "CloudEvents subject required"
                  }
                }
              },
              "time": {
                "type": "object",
                "description": "CloudEvents time https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#time",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "The timestamp value constraint."
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              },
              "dataschema": {
                "type": "object",
                "description": "CloudEvents dataschema https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#dataschema. The URI of the schema for the event payload. Absence indicates no known schema. This attribute corresponds to the 'dataschemauri' attribute in the message definition and MUST be the same as the 'dataschemauri' attribute of the definition if present.",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "format": "uri-template",
                    "description": "The URI value constraint"
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              },
              "datacontenttype": {
                "type": "object",
                "description": "The content type of the data attribute value. ",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string",
                    "description": "The content type value constraint"
                  },
                  "required": {
                    "type": "boolean"
                  }
                }
              }
            },
            "additionalProperties": {
              "type": "object",
              "description": "CloudEvent extension property",
              "properties": {
                "description": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "description": "The value type"
                },
                "value": {
                  "type": "string",
                  "description": "The value constraint"
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether the extension is required"
                }
              }
            }
          },
          "envelopeoptions": {
            "type": "object",
            "description": "Envelope metadata constraints",
            "properties": {
              "mode": {
                "type": "string",
                "description": "Whether CloudEvents 'binary' or 'structured' mode will be used"
              },
              "format": {
                "type": "string",
                "description": "The media type format used to serialize the CloudEvent in the case of mode=structured"
              }
            }
          }
        },
        "required": [
          "envelope"
        ]
      },
      "protocol_AMQP_1_0": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "AMQP/1.0"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "AMQP message metadata constraints",
            "properties": {
              "properties": {
                "type": "object",
                "description": "AMQP properties section https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-properties",
                "properties": {
                  "message-id": {
                    "type": "object",
                    "description": "AMQP properties.message-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.message-id type constraint. The type values refer to the AMQP type model` and the defined message-id types"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.message-id value constraint. "
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.message-id required"
                      }
                    }
                  },
                  "user-id": {
                    "type": "object",
                    "description": "AMQP properties.user-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.user-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.user-id value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.user-id required"
                      }
                    }
                  },
                  "to": {
                    "type": "object",
                    "description": "AMQP properties.to",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.to value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.to value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.to required"
                      }
                    }
                  },
                  "subject": {
                    "type": "object",
                    "description": "AMQP properties.subject",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.subject value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.subject value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.subject required"
                      }
                    },
                    "required": [
                      "required"
                    ]
                  },
                  "reply-to": {
                    "type": "object",
                    "description": "AMQP properties.reply-to",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.reply-to value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.reply-to value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.reply-to required"
                      }
                    }
                  },
                  "correlation-id": {
                    "type": "object",
                    "description": "AMQP properties.correlation-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP correlation-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP correlation-id value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP correlation-id required"
                      }
                    }
                  },
                  "content-type": {
                    "type": "object",
                    "description": "AMQP properties.content-type",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.content-type value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.content-type value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.content-type required"
                      }
                    }
                  },
                  "content-encoding": {
                    "type": "object",
                    "description": "AMQP properties.content-encoding",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.content-encoding value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.content-encoding value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.content-encoding required"
                      }
                    }
                  },
                  "absolute-expiry-time": {
                    "type": "object",
                    "description": "AMQP properties.absolute-expiry-time",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.absolute-expiry-time value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.absolute-expiry-time value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.absolute-expiry-time required"
                      }
                    }
                  },
                  "creation-time": {
                    "type": "object",
                    "description": "AMQP properties.creation-time",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.creation-time value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.creation-time value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.creation-time required"
                      }
                    }
                  },
                  "group-id": {
                    "type": "object",
                    "description": "AMQP properties.group-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.group-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.group-id value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.group-id required"
                      }
                    }
                  },
                  "group-sequence": {
                    "type": "object",
                    "description": "AMQP group-sequence",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP group-sequence value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP group-sequence value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP group-sequence required"
                      }
                    }
                  },
                  "reply-to-group-id": {
                    "type": "object",
                    "description": "AMQP properties.reply-to-group-id",
                    "properties": {
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "description": "AMQP properties.reply-to-group-id value type"
                      },
                      "value": {
                        "type": "string",
                        "description": "AMQP properties.reply-to-group-id value constraint"
                      },
                      "required": {
                        "type": "boolean",
                        "description": "AMQP properties.reply-to-group-id required"
                      }
                    }
                  }
                }
              },
              "application-properties": {
                "type": "object",
                "description": "AMQP application-properties section https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-application-properties",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "The application property type"
                    },
                    "value": {
                      "type": "string",
                      "description": "Application property value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Application property required"
                    }
                  }
                }
              },
              "message-annotations": {
                "type": "object",
                "description": "AMQP message-annotations section https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-message-annotations",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "The message annotation type"
                    },
                    "value": {
                      "type": "string",
                      "description": "Annotation value constraint"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Annotation required"
                    }
                  }
                }
              },
              "delivery-annotations": {
                "type": "object",
                "description": "AMQP delivery-annotations section https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-delivery-annotations",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "The annotation type"
                    },
                    "value": {
                      "type": "string",
                      "description": "Annotation value constraint"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Annotation required"
                    }
                  }
                }
              },
              "header": {
                "type": "object",
                "description": "AMQP header section https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-header",
                "properties": {
                  "durable": {
                    "type": "boolean",
                    "description": "AMQP durable flag"
                  },
                  "priority": {
                    "type": "integer",
                    "description": "AMQP priority"
                  },
                  "ttl": {
                    "type": "integer",
                    "description": "AMQP time-to-live (milliseconds)"
                  },
                  "first-acquirer": {
                    "type": "boolean",
                    "description": "AMQP first-acquirer flag"
                  },
                  "delivery-count": {
                    "type": "integer",
                    "description": "AMQP delivery-count"
                  }
                }
              },
              "footer": {
                "type": "object",
                "description": "AMQP footer section https://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-footer",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "description": "AMQP footer type"
                    },
                    "value": {
                      "type": "string",
                      "description": "Footer value constraint"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Footer required"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_MQTT_3_1_1": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "MQTT/3.1.1"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "MQTT message metadata constraints",
            "properties": {
              "qos": {
                "type": "integer",
                "description": "MQTT QoS level"
              },
              "retain": {
                "type": "boolean",
                "description": "MQTT retain flag"
              },
              "topic_name": {
                "type": "string",
                "format": "uri-template",
                "description": "MQTT topic name"
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_MQTT_5_0": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "MQTT/5.0"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "MQTT message metadata constraints",
            "properties": {
              "qos": {
                "type": "integer",
                "description": "MQTT QoS level"
              },
              "retain": {
                "type": "boolean",
                "description": "MQTT retain flag"
              },
              "topic_name": {
                "type": "string",
                "format": "uri-template",
                "description": "MQTT topic name"
              },
              "payload_format_indicator": {
                "type": "integer",
                "description": "MQTT payload format indicator"
              },
              "message_expiry_interval": {
                "type": "integer",
                "description": "MQTT message expiry interval"
              },
              "response_topic": {
                "type": "string",
                "format": "uri-template",
                "description": "MQTT response topic"
              },
              "correlation_data": {
                "type": "string",
                "format": "uri-template",
                "description": "MQTT correlation data"
              },
              "content_type": {
                "type": "string",
                "format": "uri-template",
                "description": "MQTT content type"
              },
              "user_properties": {
                "type": "array",
                "description": "MQTT user properties",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "MQTT user property name"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "MQTT user property value constraint"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_KAFKA": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "KAFKA"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "Apache Kafka message metadata constraints",
            "properties": {
              "topic": {
                "type": "string",
                "format": "uri-template",
                "description": "The Apache Kafka topic"
              },
              "partition": {
                "type": "integer",
                "description": "The Apache Kafka partition"
              },
              "key": {
                "type": "string",
                "format": "uri-template",
                "description": "The Apache Kafka key as a UTF-8 uri template. Mutually exclusive with 'key_base64'"
              },
              "key_base64": {
                "type": "string",
                "description": "Binary Apache Kafka key as a base64 encoded string. Mutually exclusive with 'key'"
              },
              "headers": {
                "type": "object",
                "description": "The Apache Kafka headers",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Kafka header name"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "Kafka header value constraint"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "Kafka header required"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_HTTP": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "HTTP"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "The HTTP message metadata constraints",
            "properties": {
              "headers": {
                "type": "array",
                "description": "The HTTP headers",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The HTTP header name"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "The HTTP header value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The HTTP header required"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "query": {
                "type": "array",
                "description": "The HTTP query parameters",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The HTTP query parameter"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "The HTTP query parameter value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The HTTP query parameter required"
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "path": {
                "type": "string",
                "format": "uri-template",
                "description": "The HTTP path as a uri template"
              },
              "method": {
                "type": "string",
                "description": "The HTTP method"
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "protocol_NATS": {
        "properties": {
          "protocol": {
            "type": "string",
            "description": "Protocol identifier. This attribute MUST be the same as the 'protocol' attribute of the definition group, but is not automatically inherited because definitions may be cross-referenced across groups",
            "enum": [
              "NATS"
            ]
          },
          "protocoloptions": {
            "type": "object",
            "description": "NATS message metadata constraints",
            "properties": {
              "subject": {
                "type": "string",
                "format": "uri-template",
                "description": "The NATS subject"
              },
              "reply-to": {
                "type": "string",
                "format": "uri-template",
                "description": "The NATS reply subject"
              },
              "headers": {
                "type": "array",
                "description": "The NATS headers",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The NATS header name"
                    },
                    "description": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string",
                      "description": "The NATS header value"
                    },
                    "required": {
                      "type": "boolean",
                      "description": "The NATS header required"
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "protocol"
        ]
      },
      "message": {
        "type": "object",
        "properties": {
          "messageid": {
            "type": "string",
            "description": "ID of the message object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "xid",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          },
          "basemessageurl": {
            "type": "string",
            "format": "uri",
            "description": "Reference to a base definition for this definition, either via a (relative) URL or a fragment identifier. The base definition is overridden by this definition. If not present, this definition does not override any base definition"
          },
          "dataschemaformat": {
            "type": "string",
            "description": "The schema format applicable to the message payload, equivalent to the 'format' attribute of the schema registry"
          },
          "dataschema": {
            "type": "object",
            "description": "The inline schema for the message payload, equivalent to the 'schema' attribute of the schema registry"
          },
          "dataschemauri": {
            "type": "string",
            "format": "uri",
            "description": "The URI of the schema for the message payload, equivalent to the 'schemauri' attribute of the schema registry"
          },
          "datacontenttype": {
            "type": "string",
            "description": "The content type for the message payload"
          }
        },
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP/1.0": "#/components/schemas/protocol_AMQP_1_0",
            "MQTT/3.1.1": "#/components/schemas/protocol_MQTT_3_1_1",
            "MQTT/5.0": "#/components/schemas/protocol_MQTT_5_0",
            "KAFKA": "#/components/schemas/protocol_KAFKA",
            "HTTP": "#/components/schemas/protocol_HTTP",
            "NATS": "#/components/schemas/protocol_NATS"
          }
        }
      },
      "endpoint": {
        "type": "object",
        "properties": {
          "endpointid": {
            "type": "string",
            "description": "ID of the endpoint object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "xid",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          },
          "usage": {
            "type": "string",
            "description": "Client's expected usage of this endpoint"
          },
          "channel": {
            "type": "string",
            "description": "tbd"
          },
          "deprecated": {
            "type": "object",
            "description": "tbd",
            "properties": {
              "effective": {
                "type": "string",
                "format": "date-time",
                "description": "tbd"
              },
              "removal": {
                "type": "string",
                "format": "date-time",
                "description": "tbd"
              },
              "alternative": {
                "type": "string",
                "format": "uri",
                "description": "tbd"
              },
              "docs": {
                "type": "string",
                "format": "uri",
                "description": "tbd"
              }
            }
          },
          "messagegroups": {
            "type": "array",
            "description": "The message groups that are supported by this endpoint",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "messages": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/message"
            }
          }
        },
        "required": [
          "usage"
        ],
        "discriminator": {
          "propertyName": "protocol",
          "mapping": {
            "AMQP/1.0": "#/components/schemas/protocol_AMQP_1_0",
            "MQTT/5.0": "#/components/schemas/protocol_MQTT_5_0",
            "MQTT/3.1.1": "#/components/schemas/protocol_MQTT_3_1_1",
            "HTTP": "#/components/schemas/protocol_HTTP",
            "KAFKA": "#/components/schemas/protocol_KAFKA",
            "NATS": "#/components/schemas/protocol_NATS"
          }
        }
      },
      "messagegroup": {
        "type": "object",
        "properties": {
          "messagegroupid": {
            "type": "string",
            "description": "ID of the messagegroup object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "xid",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          },
          "envelope": {
            "type": "string",
            "description": "Envelope format identifier that defines the common metadata information for the message. All definitions in this group share this envelope format. Mixed-envelope-format groups are not permitted. The predefined envelope format is CloudEvents/1.0"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol identifier that defines the transport message protocol. All definitions in this group share this protocol type. Mixed-protocol groups are not permitted. Predefined protocol formats are 'AMQP/1.0', 'MQTT/3.1.1', 'MQTT/5.0', 'KAFKA', 'HTTP', and 'NATS'"
          },
          "messages": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/message"
            }
          }
        }
      },
      "schemaVersion": {
        "type": "object",
        "properties": {
          "versionid": {
            "type": "string",
            "description": "ID of the schema version"
          },
          "schemaid": {
            "type": "string",
            "description": "ID of the schema object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "xid",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          },
          "format": {
            "type": "string",
            "description": "Schema format identifier for this schema version"
          }
        },
        "oneOf": [
          {
            "properties": {
              "schema": {
                "description": "Embedded schema object",
                "oneOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": [
              "schema"
            ]
          },
          {
            "properties": {
              "schemabase64": {
                "description": "Embedded schema object as binary data",
                "type": "string",
                "format": "base64"
              }
            },
            "required": [
              "schemabase64"
            ]
          },
          {
            "properties": {
              "schemaurl": {
                "description": "Linked schema object",
                "type": "string",
                "format": "uri"
              }
            },
            "required": [
              "schemaurl"
            ]
          }
        ]
      },
      "schema": {
        "type": "object",
        "properties": {
          "schemaid": {
            "type": "string",
            "description": "ID of the schema object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "xid",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          }
        },
        "oneOf": [
          {
            "properties": {
              "versionsurl": {
                "type": "string"
              },
              "versionscount": {
                "type": "integer"
              }
            },
            "required": [
              "versionsurl"
            ]
          },
          {
            "properties": {
              "versions": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/schemaVersion"
                }
              }
            },
            "required": [
              "versions"
            ]
          }
        ]
      },
      "schemagroup": {
        "type": "object",
        "properties": {
          "schemagroupid": {
            "type": "string",
            "description": "ID of the schemagroup object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "epoch": {
            "type": "integer",
            "description": "Epoch time of the object creation"
          },
          "self": {
            "type": "string",
            "format": "uri",
            "description": "URL of the object"
          },
          "xid": {
            "type": "string",
            "format": "xid",
            "description": "Relative URL of the object"
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "documentation": {
            "type": "string",
            "format": "uri",
            "description": "URI of the documentation of the object"
          },
          "labels": {
            "type": "object",
            "description": "Labels for the object"
          },
          "createdat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object creation"
          },
          "modifiedat": {
            "type": "string",
            "format": "date-time",
            "description": "Time of the object modification"
          },
          "schemas": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/schema"
            }
          }
        }
      }
    }
  }
}